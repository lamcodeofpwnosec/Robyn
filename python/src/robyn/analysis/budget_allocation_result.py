#pyre-strict   

from dataclasses import dataclass
from typing import List, Optional
import pandas as pd

from matplotlib.figure import Figure
from scipy.optimize import OptimizeResult

@dataclass(frozen=True)
class BudgetAllocationResult:
    """
    A data class to store the result of a budget allocation optimization.

    Attributes:
        dt_optimOut (pd.DataFrame): Optimized output data.
        mainPoints (List[float]): Main points of the optimization.
        nlsMod (Optional[OptimizeResult]): Non-linear optimization result.
        plots (List[Figure]): Plots generated by the optimization.
        scenario (str): Scenario name.
        usecase (str): Use case name.
        total_budget (float): Total budget allocated.
        skipped_coef0 (List[str]): Channels with zero coefficients.
        skipped_constr (List[str]): Channels with zero constraints.
        no_spend (List[str]): Channels with no spend.
        ui (Optional[List[Figure]]): UI plots.
    """
    dt_optimOut: pd.DataFrame
    mainPoints: List[float]
    nlsMod: Optional[OptimizeResult]
    plots: List[Figure]
    scenario: str
    usecase: str
    total_budget: float
    skipped_coef0: List[str]
    skipped_constr: List[str]
    no_spend: List[str]
    ui: Optional[List[Figure]]

    @classmethod
    def from_data(
        cls,
        dt_optimOut: pd.DataFrame,
        mainPoints: List[float],
        nlsMod: Optional[OptimizeResult],
        plots: List[Figure],
        scenario: str,
        usecase: str,
        total_budget: Optional[float],
        total_budget_window: float,
        zero_coef_channel: List[str],
        zero_constraint_channel: List[str],
        zero_spend_channel: List[str],
        ui: bool
    ) -> 'BudgetAllocationResult':
        """
        Create a BudgetAllocationResult instance from data.

        Args:
            dt_optimOut (pd.DataFrame): Optimized output data.
            mainPoints (List[float]): Main points of the optimization.
            nlsMod (Optional[OptimizeResult]): Non-linear optimization result.
            plots (List[Figure]): Plots generated by the optimization.
            scenario (str): Scenario name.
            usecase (str): Use case name.
            total_budget (Optional[float]): Total budget allocated.
            total_budget_window (float): Total budget window.
            zero_coef_channel (List[str]): Channels with zero coefficients.
            zero_constraint_channel (List[str]): Channels with zero constraints.
            zero_spend_channel (List[str]): Channels with no spend.
            ui (bool): Whether to include UI plots.

        Returns:
            BudgetAllocationResult: A BudgetAllocationResult instance.
        """
        total_budget = total_budget if total_budget is not None else total_budget_window
        ui_plots = plots if ui else None
        return cls(
            dt_optimOut=dt_optimOut,
            mainPoints=mainPoints,
            nlsMod=nlsMod,
            plots=plots,
            scenario=scenario,
            usecase=usecase,
            total_budget=total_budget,
            skipped_coef0=zero_coef_channel,
            skipped_constr=zero_constraint_channel,
            no_spend=zero_spend_channel,
            ui=ui_plots
        )
